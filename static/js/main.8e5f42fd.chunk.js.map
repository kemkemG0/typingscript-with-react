{"version":3,"sources":["features/game.ts","components/style.ts","components/AlphabetLabel.tsx","components/RawStringLabel.tsx","components/GameInfo.tsx","components/GameStage.tsx","components/InitialStage.tsx","components/ResultStage.tsx","App.tsx","index.tsx"],"names":["contents","initialState","contentsID","rawString","alphabetString","listeningCharIndex","allInputCount","doneCharCount","displayType","gameSlice","createSlice","name","reducers","keypressed","state","action","pressedKeyCode","payload","listeningChar","String","fromCharCode","length","changeDisplayType","actions","game","padding","borderRadius","background","margin","width","height","textAlign","position","gamedisplay","transform","top","left","textblock","letterSpacing","fontSize","gameinfo","color","right","done","AlphabetLabel","ind","useSelector","alphabets","doneAlpha","substr","yetAlpha","style","RawStringLabel","GameInfo","allCount","result","toFixed","GameStage","dispatch","useDispatch","keyLog","useCallback","event","console","log","keyCode","useEffect","window","addEventListener","removeEventListener","InitialStage","ResultStage","App","store","configureStore","reducer","ReactDOM","render","StrictMode","className","document","getElementById"],"mappings":"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","file":"static/js/main.8e5f42fd.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface GameState {\n  contentsID: number;\n  rawString: string;\n  alphabetString: string;\n  listeningCharIndex: number;\n  allInputCount: number;\n  doneCharCount: number;\n  displayType: \"INIT\" | \"GAME\" | \"RESULT\";\n}\n\nconst contents: string[][] = [\n  [\"こんにちは世界\", \"KONNNITIHASEKAI\"],\n  [\"22こんにちは世界22\", \"22KONNNITIHASEKAI22\"],\n  [\"33こんにちは世界33\", \"33KONNNITIHASEKAI33\"],\n  [\"44こんにちは世界44\", \"44KONNNITIHASEKAI44\"],\n  [\"55こんにちは世界55\", \"55KONNNITIHASEKAI55\"],\n  [\"66こんにちは世界66\", \"66KONNNITIHASEKAI66\"],\n];\n\nconst initialState: GameState = {\n  contentsID: 0,\n  rawString: contents[0][0],\n  alphabetString: contents[0][1],\n  listeningCharIndex: 0,\n  allInputCount: 0,\n  doneCharCount: 0,\n  displayType: \"INIT\",\n};\n\n// createSliceとは、actionの定義とaction creator,reducerをまとめて生成できる。\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    keypressed: (state, action) => {\n      const { pressedKeyCode } = action.payload;\n      const listeningChar = state.alphabetString[state.listeningCharIndex];\n\n      // Redux Tool Kitではstateを直接変更してもOK！！\n      state.allInputCount += 1;\n\n      if (String.fromCharCode(pressedKeyCode) === listeningChar) {\n        state.listeningCharIndex += 1;\n        state.doneCharCount += 1;\n      }\n      if (state.listeningCharIndex === state.alphabetString.length) {\n        state.listeningCharIndex = 0;\n        state.contentsID += 1;\n        if (state.contentsID !== contents.length)\n          [state.rawString, state.alphabetString] = contents[state.contentsID];\n        else {\n          state.displayType = \"RESULT\";\n        }\n      }\n    },\n    changeDisplayType: (state, action) => {\n      state.displayType = action.payload;\n    },\n  },\n});\n\nexport const { keypressed, changeDisplayType } = gameSlice.actions;\n","export const game: React.CSSProperties = {\n  padding: \"0.5em\",\n  borderRadius: \"1em\",\n  background: \"lightslategray\",\n  margin: \"150px auto\",\n  width: \"600px\",\n  height: \"400px\",\n  textAlign: \"center\",\n  position: \"relative\",\n};\n\nexport const gamedisplay: React.CSSProperties = {\n  background: \"lavender\",\n  position: \"absolute\",\n  width: \"90%\",\n  height: \"50%\",\n  borderRadius: \"1em\",\n\n  transform: \"translate(-50%, -50%)\",\n  top: \"50%\",\n  left: \"50%\",\n};\n\nexport const textblock: React.CSSProperties = {\n  letterSpacing: \"5px\",\n  position: \"absolute\",\n  width: \"100%\",\n  top: \"45%\",\n  left: \"50%\",\n  transform: \"translate(-50%, 0%)\",\n  fontSize: \"25px\",\n};\n\nexport const gameinfo: React.CSSProperties = {\n  color: \"white\",\n  position: \"absolute\",\n  top: \"10%\",\n  right: \"10%\",\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../features/game\";\n\nconst done: React.CSSProperties = {\n  color: \"darkgray\",\n};\n\nconst AlphabetLabel: React.FC = () => {\n  const ind = useSelector((state: GameState) => state.listeningCharIndex);\n  const alphabets = useSelector((state: GameState) => state.alphabetString);\n\n  const doneAlpha = alphabets.substr(0, ind);\n  const yetAlpha = alphabets.substr(ind);\n\n  return (\n    <div>\n      <span style={done}>{doneAlpha}</span>\n      <span>{yetAlpha}</span>\n    </div>\n  );\n};\n\nexport default AlphabetLabel;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../features/game\";\n\nconst RawStringLabel: React.FC = () => {\n  const rawString = useSelector((state: GameState) => state.rawString);\n  return <div>{rawString}</div>;\n};\n\nexport default RawStringLabel;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../features/game\";\n\nconst GameInfo: React.FC = () => {\n  const allCount = useSelector((state: GameState) => state.allInputCount);\n  const okCount = useSelector((state: GameState) => state.doneCharCount);\n\n  const result = (okCount / allCount) * 100 || 0;\n  return <div>正答率は{result.toFixed(2)}%です</div>;\n};\n\nexport default GameInfo;\n","import React, { useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { game, gamedisplay, gameinfo, textblock } from \"./style\";\nimport AlphabetLabel from \"./AlphabetLabel\";\nimport RawStringLabel from \"./RawStringLabel\";\nimport GameInfo from \"./GameInfo\";\nimport { GameState, keypressed } from \"../features/game\";\n\nconst GameStage: React.FC = () => {\n  const dispatch = useDispatch();\n  const keyLog = useCallback((event) => {\n    console.log(String.fromCharCode(event.keyCode), \"is Pressed!!\");\n\n    const payload: { pressedKeyCode: number } = {\n      pressedKeyCode: event.keyCode,\n    };\n\n    dispatch(keypressed(payload));\n  }, []);\n\n  useEffect(() => {\n    // 最初だけ登録してる\n    window.addEventListener(\"keydown\", keyLog, false);\n    return () => {\n      window.removeEventListener(\"keydown\", keyLog, false);\n    };\n  }, []);\n\n  return (\n    <div style={game}>\n      <div style={gameinfo}>\n        <GameInfo />\n      </div>\n      <div style={gamedisplay}>\n        <div style={textblock}>\n          <RawStringLabel />\n          <AlphabetLabel />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameStage;\n","import React, { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeDisplayType, GameState } from \"../features/game\";\nimport { game, gamedisplay, gameinfo, textblock } from \"./style\";\n\nconst InitialStage: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const displayType = useSelector((state: GameState) => state.displayType);\n\n  const keyLog = useCallback((event) => {\n    console.log(String.fromCharCode(event.keyCode), \"is Pressed!!\");\n    const payload = \"GAME\";\n    if (event.keyCode === 32 || event.keyCode === 13)\n      dispatch(changeDisplayType(payload));\n  }, []);\n  // キープッシュのイベントリスナー登録\n  useEffect(() => {\n    // 最初だけ登録してる\n    window.addEventListener(\"keydown\", keyLog, false);\n    return () => {\n      window.removeEventListener(\"keydown\", keyLog, false);\n    };\n  }, []);\n\n  return (\n    <div style={game}>\n      <div style={gamedisplay}>\n        <div style={textblock}>SpaceまたはEnterを押してください</div>\n      </div>\n    </div>\n  );\n};\n\nexport default InitialStage;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../features/game\";\nimport { game, gamedisplay, gameinfo, textblock } from \"./style\";\n\nconst ResultStage: React.FC = () => {\n  const { allInputCount, doneCharCount } = useSelector(\n    (state: GameState) => state\n  );\n  const result = (doneCharCount / allInputCount) * 100 || 0;\n  return (\n    <div style={game}>\n      <div style={gameinfo}>\n        <br />\n        入力数:{allInputCount} 正解数:{doneCharCount}ミス:\n        {allInputCount - doneCharCount}正答率:{result.toFixed(2)}%\n      </div>\n      <div style={gamedisplay}>\n        <div style={textblock}>終了！！</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultStage;\n","import { useSelector } from \"react-redux\";\nimport React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport GameStage from \"./components/GameStage\";\nimport \"./App.css\";\nimport { GameState } from \"./features/game\";\nimport InitialStage from \"./components/InitialStage\";\nimport ResultStage from \"./components/ResultStage\";\n\nconst App: React.FC = () => {\n  switch (useSelector((state: GameState) => state.displayType)) {\n    case \"INIT\":\n      return <InitialStage />;\n    case \"GAME\":\n      return <GameStage />;\n    default:\n      return <ResultStage />;\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { gameSlice } from \"./features/game\";\nimport App from \"./App\";\n\n// ストアにReducerを登録?\nconst store = configureStore({ reducer: gameSlice.reducer });\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"container\">\n        <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\") as HTMLElement\n);\n"],"sourceRoot":""}